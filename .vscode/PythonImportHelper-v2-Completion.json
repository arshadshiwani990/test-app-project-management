[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0001_initial",
        "description": "api.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Project',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "api.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "api.apps",
        "description": "api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "api.apps",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Project(models.Model):\n    name = models.CharField(max_length=255, unique=True)\n    description = models.TextField()\n    created_by = models.ForeignKey(User, related_name='projects', on_delete=models.CASCADE)\n    created_at = models.DateTimeField(default=timezone.now)\n    updated_at = models.DateTimeField(auto_now=True)\n    is_deleted = models.BooleanField(default=False)\n    def __str__(self):\n        return self.name\nclass Task(models.Model):",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Task(models.Model):\n    project = models.ForeignKey(Project, related_name='tasks', on_delete=models.CASCADE)\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    status = models.CharField(max_length=50)\n    due_date = models.DateTimeField()\n    created_at = models.DateTimeField(default=timezone.now)\n    updated_at = models.DateTimeField(auto_now=True)\n    is_deleted = models.BooleanField(default=False)\n    def __str__(self):",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "ProjectUser",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class ProjectUser(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n    can_create = models.BooleanField(default=False)\n    can_delete = models.BooleanField(default=False)\n    can_edit = models.BooleanField(default=False)\n    can_add_users = models.BooleanField(default=False)",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "IsProjectAdminOrReadOnly",
        "kind": 6,
        "importPath": "api.permissions",
        "description": "api.permissions",
        "peekOfCode": "class IsProjectAdminOrReadOnly(permissions.BasePermission):\n    def has_permission(self, request, view):\n        project = Project.objects.get(pk=view.kwargs['pk'])\n        user_permissions = ProjectUser.objects.filter(project=project, user=request.user).first()\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        return user_permissions and user_permissions.can_edit\nclass CanCreateDeleteEdit(permissions.BasePermission):\n    def has_permission(self, request, view):\n        project = Project.objects.get(pk=view.kwargs['pk'])",
        "detail": "api.permissions",
        "documentation": {}
    },
    {
        "label": "CanCreateDeleteEdit",
        "kind": 6,
        "importPath": "api.permissions",
        "description": "api.permissions",
        "peekOfCode": "class CanCreateDeleteEdit(permissions.BasePermission):\n    def has_permission(self, request, view):\n        project = Project.objects.get(pk=view.kwargs['pk'])\n        user_permissions = ProjectUser.objects.filter(project=project, user=request.user).first()\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        if request.method == 'POST':\n            return user_permissions and user_permissions.can_create\n        if request.method == 'DELETE':\n            return user_permissions and user_permissions.can_delete",
        "detail": "api.permissions",
        "documentation": {}
    },
    {
        "label": "ProjectSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class ProjectSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Project\n        fields = '__all__'\nclass TaskSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = '__all__'\nclass ProjectUserSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class TaskSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = '__all__'\nclass ProjectUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ProjectUser\n        fields = '__all__'",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectUserSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class ProjectUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ProjectUser\n        fields = '__all__'",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'projects', ProjectViewSet)\nrouter.register(r'tasks', TaskViewSet)\nrouter.register(r'project-users', ProjectUserViewSet)\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "ProjectViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class ProjectViewSet(viewsets.ModelViewSet):\n    queryset = Project.objects.filter(is_deleted=False)\n    serializer_class = ProjectSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def perform_destroy(self, instance):\n        instance.is_deleted = True\n        instance.save()\nclass TaskViewSet(viewsets.ModelViewSet):\n    queryset = Task.objects.filter(is_deleted=False)\n    serializer_class = TaskSerializer",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "TaskViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class TaskViewSet(viewsets.ModelViewSet):\n    queryset = Task.objects.filter(is_deleted=False)\n    serializer_class = TaskSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def perform_destroy(self, instance):\n        instance.is_deleted = True\n        instance.save()\nclass ProjectUserViewSet(viewsets.ModelViewSet):\n    queryset = ProjectUser.objects.all()\n    serializer_class = ProjectUserSerializer",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "ProjectUserViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class ProjectUserViewSet(viewsets.ModelViewSet):\n    queryset = ProjectUser.objects.all()\n    serializer_class = ProjectUserSerializer\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project_management.asgi",
        "description": "project_management.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "project_management.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-t5jvv@&zof-n_-kk_9i1rp3x))r#%(pz^l3y0erl$9at^wm@ea'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG=True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-t5jvv@&zof-n_-kk_9i1rp3x))r#%(pz^l3y0erl$9at^wm@ea'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG=True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework_simplejwt',\n    'api',",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'project_management.urls'",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "ROOT_URLCONF = 'project_management.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "WSGI_APPLICATION = 'project_management.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSIMPLE_JWT = {",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "project_management.settings",
        "description": "project_management.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',",
        "detail": "project_management.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "project_management.urls",
        "description": "project_management.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n]\nfrom rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\nurlpatterns += [\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),",
        "detail": "project_management.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project_management.wsgi",
        "description": "project_management.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "project_management.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_management.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]